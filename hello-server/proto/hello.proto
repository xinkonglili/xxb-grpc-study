//这是在说明我们使用的是proto3语法
syntax = "proto3";

//这部分的内容是关于最后生成的go文件是处在那个目录那个包中， . 代表在当前目录生成,service代表了生成的go文件的包名是service
option go_package = ".;service";

//然后我们需要定义一个服务，在这个服务中需要有一个方法，这个方法可以接收客户端的参数，再返回服务端的响应
//其实很容易可以看出，我们定义了一个service，称为SayHello，这个服务中有一个rpc方法，名为SayHello
//它将发送一个 HelloRequest 类型的请求消息，并期望服务器返回一个 HelloResponse 类型的响应消息。
service SayHello{
  rpc SayHello(HelloRequest)
      returns (HelloResponse) {} //在 Protocol Buffer 中，花括号 {} 表示一个消息类型或一个字段定义的开始和结束
}

//message关键字，其实你可以理解为Golang中的结构体
//这里比较特别的是变量后面的"赋值"。注意，这里并不是赋值，而是在定义这个变量在这个message中的位置
message HelloRequest{
  string requestName = 1;
  int64 age = 2;
}

message HelloResponse{
  string responseMsg = 1;
}